// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

enclave {
    from "openenclave/edl/syscall.edl" import *;
    from "platform.edl" import *;
    trusted {
        public uint64_t kernel();
        public void std_ecall(
            [out] uint64_t * stdin_id,
            [out] uint64_t * stdout_id,
            [out] uint64_t * stderr_id
        );
        public void enclave_keys(
            [in, string] char *pri,
            [in, string] char *pub
        );
    };

    untrusted {
        void fprintf_ocall(
            uint64_t stream,
            [in, string] char * buffer,
            [out] int * __result
        );
        void fwrite_ocall(
            [in, size=total_bytes] const void * ptr,
            size_t size,
            size_t count,
            size_t total_bytes,
            uint64_t stream,
            [out] size_t * __result
        );
        void fputs_ocall(
            [in, string] const char * str,
            uint64_t file,
            [out] int * __result
        );
        void fputc_ocall(
            int c,
            uint64_t file,
            [out] int * __result
        );
        void fflush_ocall(
            uint64_t file,
            [out] int * __result
        );
        void fopen_ocall(
            [in, string] const char * path,
            [in, string] const char * mode,
            [out] uint64_t * stream
        );
        void fclose_ocall(
            uint64_t file,
            [out] int * __result
        );
        void fgets_ocall(
            [out, count=size] char * string,
            size_t size,
            uint64_t stream,
            [out] int * null_chk
        );
        void fread_ocall(
            [out, size = totbyte] void * ptr,
            size_t size,
            size_t count,
            uint64_t stream,
            size_t totbyte,
            [out] size_t * __result
        );
        void fgetc_ocall(
            uint64_t stream,
            [out] int * __result
        );
        void fseeko_ocall(
            uint64_t stream,
            int64_t offset,
            int whence,
            [out] int * __result
        );

        void freopen_ocall(
            [in, string] const char * filename,
            [in, string] const char * mode,
            [in, out] uint64_t * stream
        );

        void ftello_ocall(
            uint64_t stream,
            [out] int64_t * __result
        );

        void fdopen_ocall(
            int fd,
            [in, string] const char * mode,
            [out] uint64_t * stream
        );

        void ungetc_ocall(
            int c,
            uint64_t stream,
            [out] int * __result
        );

        void unlink_ocall(
            [in, string] const char * pathname,
            [out] int * __result
        );

        void remove_ocall(
            [in, string] const char * path,
            [out] int * __result
        );

        //void atexit_ocall


        void uname_ocall(
            [out, size=len] char * buffer,
            size_t len,
            [out] int * __result
        );

        void fileno_ocall(
            uint64_t stream,
            [out] int * __result
        );

        void opendir_ocall(
            [in, string] const char * name,
            [out] uint64_t *__result
        );

        void readdir_ocall(
            uint64_t dirp,
            [out] uint64_t * __result
        );

        void closedir_ocall(
            uint64_t dirp,
            [out] int * __result
        );

        void mkstemp_ocall(
            [in, out, string] char * template,
            [out] int * __result
        );

        void close_ocall(
            int fd,
            [out] int * __result
        );

        void rewind_ocall(
            uint64_t file
        );

        void ctime_ocall(
            [in] const time_t * timer,
            [out, size=100] char * __result 
        );

        void getcwd_ocall(
            [out, count = size] char * buf,
            size_t size
        );
        void geteuid_ocall(
            [out] unsigned int * __result
        );
        void isatty_ocall(
            int fd,
            [out] int * __result
        );
        void memcpy_chk_ocall(
            [out, size = destlen] void * dest,
            [in, size = len] const void * src,
            size_t len,
            size_t destlen,
            [out] int * __result
        );
        void getlogin_r_ocall(
            [out, count = bufsize] char * buf,
            size_t bufsize,
            [out] int * __result
        );

        void ctype_b_loc_ocall(
            [out] unsigned short ***__result
        );
        void strncpy_chk_ocall(
            [out, count=s1len] char * s1,
            [in, string] const char * s2,
            size_t n,
            size_t s1len
        );
        void execl_ocall(
            [in, string] const char * file,
            [in, string] const char * arg1,
            [in, string] const char * arg2,
            [in, string] const char * arg3,
            [out] int * __result
        );
        void execlp_ocall(
            [in, string] const char * file,
            [in, string] const char * arg1,
            [in, string] const char * arg2,
            [in, string] const char * arg3,
            [out] int * __result
        );
        void fstat_ocall(
            int fd,
            uint64_t buf,
            [out] int * __result
        );
        void getenv_ocall(
            [in, string] const char * buf,
            [out, count=500] char * __result,
            [out] int * null_chk
        );
        void expf_ocall(
            float tmp,
            [out] float * __result
        );
    };
};


