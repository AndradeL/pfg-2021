/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_HELLOWORLD_T_H
#define EDGER8R_HELLOWORLD_T_H

#include <openenclave/enclave.h>

#include "helloworld_args.h"

OE_EXTERNC_BEGIN

/**** Trusted function IDs ****/
enum
{
    helloworld_fcn_id_fwi = 0,
    helloworld_fcn_id_std_ecall = 1,
    helloworld_fcn_id_encript_test = 2,
    helloworld_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** ECALL marshalling structs. ****/
typedef struct _fwi_args_t
{
    oe_result_t _result;
    int argc;
    char** argv;
} fwi_args_t;

typedef struct _std_ecall_args_t
{
    oe_result_t _result;
    uint64_t* stdin_id;
    uint64_t* stdout_id;
    uint64_t* stderr_id;
} std_ecall_args_t;

typedef struct _encript_test_args_t
{
    oe_result_t _result;
} encript_test_args_t;

/**** ECALL prototypes. ****/
void fwi(
    int argc,
    char** argv);

void std_ecall(
    uint64_t* stdin_id,
    uint64_t* stdout_id,
    uint64_t* stderr_id);

void encript_test(void);

/**** Untrusted function IDs. ****/
enum
{
    helloworld_fcn_id_fwrite_ocall = 0,
    helloworld_fcn_id_fputs_ocall = 1,
    helloworld_fcn_id_fputc_ocall = 2,
    helloworld_fcn_id_fflush_ocall = 3,
    helloworld_fcn_id_fopen_ocall = 4,
    helloworld_fcn_id_fclose_ocall = 5,
    helloworld_fcn_id_fgets_ocall = 6,
    helloworld_fcn_id_fread_ocall = 7,
    helloworld_fcn_id_fgetc_ocall = 8,
    helloworld_fcn_id_fseeko_ocall = 9,
    helloworld_fcn_id_freopen_ocall = 10,
    helloworld_fcn_id_ftello_ocall = 11,
    helloworld_fcn_id_fdopen_ocall = 12,
    helloworld_fcn_id_ungetc_ocall = 13,
    helloworld_fcn_id_unlink_ocall = 14,
    helloworld_fcn_id_remove_ocall = 15,
    helloworld_fcn_id_uname_ocall = 16,
    helloworld_fcn_id_fileno_ocall = 17,
    helloworld_fcn_id_mkstemp_ocall = 18,
    helloworld_fcn_id_close_ocall = 19,
    helloworld_fcn_id_rewind_ocall = 20,
    helloworld_fcn_id_getcwd_ocall = 21,
    helloworld_fcn_id_geteuid_ocall = 22,
    helloworld_fcn_id_isatty_ocall = 23,
    helloworld_fcn_id_memcpy_chk_ocall = 24,
    helloworld_fcn_id_getlogin_r_ocall = 25,
    helloworld_fcn_id_ctype_b_loc_ocall = 26,
    helloworld_fcn_id_strncpy_chk_ocall = 27,
    helloworld_fcn_id_execl_ocall = 28,
    helloworld_fcn_id_execlp_ocall = 29,
    helloworld_fcn_id_getenv_ocall = 30,
    helloworld_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

/**** OCALL marshalling structs. ****/
typedef struct _fwrite_ocall_args_t
{
    oe_result_t _result;
    void* ptr;
    size_t size;
    size_t count;
    size_t total_bytes;
    uint64_t stream;
    size_t* result;
} fwrite_ocall_args_t;

typedef struct _fputs_ocall_args_t
{
    oe_result_t _result;
    char* str;
    size_t str_len;
    uint64_t file;
    int* result;
} fputs_ocall_args_t;

typedef struct _fputc_ocall_args_t
{
    oe_result_t _result;
    int c;
    uint64_t file;
    int* result;
} fputc_ocall_args_t;

typedef struct _fflush_ocall_args_t
{
    oe_result_t _result;
    uint64_t file;
    int* result;
} fflush_ocall_args_t;

typedef struct _fopen_ocall_args_t
{
    oe_result_t _result;
    char* path;
    size_t path_len;
    char* mode;
    size_t mode_len;
    uint64_t* stream;
} fopen_ocall_args_t;

typedef struct _fclose_ocall_args_t
{
    oe_result_t _result;
    uint64_t file;
    int* result;
} fclose_ocall_args_t;

typedef struct _fgets_ocall_args_t
{
    oe_result_t _result;
    char* string;
    size_t size;
    uint64_t stream;
    int* null_chk;
} fgets_ocall_args_t;

typedef struct _fread_ocall_args_t
{
    oe_result_t _result;
    void* ptr;
    size_t size;
    size_t count;
    uint64_t stream;
    size_t totbyte;
    size_t* result;
} fread_ocall_args_t;

typedef struct _fgetc_ocall_args_t
{
    oe_result_t _result;
    uint64_t stream;
    int* result;
} fgetc_ocall_args_t;

typedef struct _fseeko_ocall_args_t
{
    oe_result_t _result;
    uint64_t stream;
    int64_t offset;
    int whence;
    int* result;
} fseeko_ocall_args_t;

typedef struct _freopen_ocall_args_t
{
    oe_result_t _result;
    char* filename;
    size_t filename_len;
    char* mode;
    size_t mode_len;
    uint64_t* stream;
} freopen_ocall_args_t;

typedef struct _ftello_ocall_args_t
{
    oe_result_t _result;
    uint64_t stream;
    int64_t* result;
} ftello_ocall_args_t;

typedef struct _fdopen_ocall_args_t
{
    oe_result_t _result;
    int fd;
    char* mode;
    size_t mode_len;
    uint64_t* stream;
} fdopen_ocall_args_t;

typedef struct _ungetc_ocall_args_t
{
    oe_result_t _result;
    int c;
    uint64_t stream;
    int* result;
} ungetc_ocall_args_t;

typedef struct _unlink_ocall_args_t
{
    oe_result_t _result;
    char* pathname;
    size_t pathname_len;
    int* result;
} unlink_ocall_args_t;

typedef struct _remove_ocall_args_t
{
    oe_result_t _result;
    char* path;
    size_t path_len;
    int* result;
} remove_ocall_args_t;

typedef struct _uname_ocall_args_t
{
    oe_result_t _result;
    char* buffer;
    size_t len;
    int* result;
} uname_ocall_args_t;

typedef struct _fileno_ocall_args_t
{
    oe_result_t _result;
    uint64_t stream;
    int* result;
} fileno_ocall_args_t;

typedef struct _mkstemp_ocall_args_t
{
    oe_result_t _result;
    char* template;
    size_t template_len;
    int* result;
} mkstemp_ocall_args_t;

typedef struct _close_ocall_args_t
{
    oe_result_t _result;
    int fd;
    int* result;
} close_ocall_args_t;

typedef struct _rewind_ocall_args_t
{
    oe_result_t _result;
    uint64_t file;
} rewind_ocall_args_t;

typedef struct _getcwd_ocall_args_t
{
    oe_result_t _result;
    char* buf;
    size_t size;
} getcwd_ocall_args_t;

typedef struct _geteuid_ocall_args_t
{
    oe_result_t _result;
    unsigned int* result;
} geteuid_ocall_args_t;

typedef struct _isatty_ocall_args_t
{
    oe_result_t _result;
    int fd;
    int* result;
} isatty_ocall_args_t;

typedef struct _memcpy_chk_ocall_args_t
{
    oe_result_t _result;
    void* dest;
    void* src;
    size_t len;
    size_t destlen;
    int* result;
} memcpy_chk_ocall_args_t;

typedef struct _getlogin_r_ocall_args_t
{
    oe_result_t _result;
    char* buf;
    size_t bufsize;
    int* result;
} getlogin_r_ocall_args_t;

typedef struct _ctype_b_loc_ocall_args_t
{
    oe_result_t _result;
    unsigned short int*** result;
} ctype_b_loc_ocall_args_t;

typedef struct _strncpy_chk_ocall_args_t
{
    oe_result_t _result;
    char* s1;
    char* s2;
    size_t s2_len;
    size_t n;
    size_t s1len;
} strncpy_chk_ocall_args_t;

typedef struct _execl_ocall_args_t
{
    oe_result_t _result;
    char* file;
    size_t file_len;
    char* arg1;
    size_t arg1_len;
    char* arg2;
    size_t arg2_len;
    char* arg3;
    size_t arg3_len;
    int* result;
} execl_ocall_args_t;

typedef struct _execlp_ocall_args_t
{
    oe_result_t _result;
    char* file;
    size_t file_len;
    char* arg1;
    size_t arg1_len;
    char* arg2;
    size_t arg2_len;
    char* arg3;
    size_t arg3_len;
    int* result;
} execlp_ocall_args_t;

typedef struct _getenv_ocall_args_t
{
    oe_result_t _result;
    char* buf;
    size_t buf_len;
    char* result;
    int* null_chk;
} getenv_ocall_args_t;

/**** OCALL prototypes. ****/
oe_result_t fwrite_ocall(
    const void* ptr,
    size_t size,
    size_t count,
    size_t total_bytes,
    uint64_t stream,
    size_t* result);

oe_result_t fputs_ocall(
    const char* str,
    uint64_t file,
    int* result);

oe_result_t fputc_ocall(
    int c,
    uint64_t file,
    int* result);

oe_result_t fflush_ocall(
    uint64_t file,
    int* result);

oe_result_t fopen_ocall(
    const char* path,
    const char* mode,
    uint64_t* stream);

oe_result_t fclose_ocall(
    uint64_t file,
    int* result);

oe_result_t fgets_ocall(
    char* string,
    size_t size,
    uint64_t stream,
    int* null_chk);

oe_result_t fread_ocall(
    void* ptr,
    size_t size,
    size_t count,
    uint64_t stream,
    size_t totbyte,
    size_t* result);

oe_result_t fgetc_ocall(
    uint64_t stream,
    int* result);

oe_result_t fseeko_ocall(
    uint64_t stream,
    int64_t offset,
    int whence,
    int* result);

oe_result_t freopen_ocall(
    const char* filename,
    const char* mode,
    uint64_t* stream);

oe_result_t ftello_ocall(
    uint64_t stream,
    int64_t* result);

oe_result_t fdopen_ocall(
    int fd,
    const char* mode,
    uint64_t* stream);

oe_result_t ungetc_ocall(
    int c,
    uint64_t stream,
    int* result);

oe_result_t unlink_ocall(
    const char* pathname,
    int* result);

oe_result_t remove_ocall(
    const char* path,
    int* result);

oe_result_t uname_ocall(
    char* buffer,
    size_t len,
    int* result);

oe_result_t fileno_ocall(
    uint64_t stream,
    int* result);

oe_result_t mkstemp_ocall(
    char* template,
    int* result);

oe_result_t close_ocall(
    int fd,
    int* result);

oe_result_t rewind_ocall(uint64_t file);

oe_result_t getcwd_ocall(
    char* buf,
    size_t size);

oe_result_t geteuid_ocall(unsigned int* result);

oe_result_t isatty_ocall(
    int fd,
    int* result);

oe_result_t memcpy_chk_ocall(
    void* dest,
    const void* src,
    size_t len,
    size_t destlen,
    int* result);

oe_result_t getlogin_r_ocall(
    char* buf,
    size_t bufsize,
    int* result);

oe_result_t ctype_b_loc_ocall(unsigned short int*** result);

oe_result_t strncpy_chk_ocall(
    char* s1,
    const char* s2,
    size_t n,
    size_t s1len);

oe_result_t execl_ocall(
    const char* file,
    const char* arg1,
    const char* arg2,
    const char* arg3,
    int* result);

oe_result_t execlp_ocall(
    const char* file,
    const char* arg1,
    const char* arg2,
    const char* arg3,
    int* result);

oe_result_t getenv_ocall(
    const char* buf,
    char* result,
    int* null_chk);

OE_EXTERNC_END

#endif // EDGER8R_HELLOWORLD_T_H
